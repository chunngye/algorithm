#특정 원소가 속한 집합을 찾기
def find_parent(parent,x):
    # 루트 노드를 찾을 때까지 재귀 호출 
    if parent[x] != x:
        parent[x] = find_parent(parent,parent[x])
    return parent[x]

# 두 원소가 속한 집합을 합치기 
def union_parent(parent,a,b):
    a = find_parent(parent,a)
    b = find_parent(parent,b)
    if a < b:
        parent[b] = a 
    else :
        parent[a] = b
    
v,e = map(int,input().split())
parent = [0] * (v+1) #부모 테이블 초기화 

edges = []
result = 0

#부모 테이블 상에서, 부모를 자기 자신으로 초기화 
for i in range(1,v+1):
    parent[i] = i 

#union 연산을 각각 수행 
for i in range(e):
    a,b,cost = map(int,input().split())
    # 비용순으로 정렬하기 위해서 튜플의 첫 번째 원소를 비용으로 설정 
    edges.append((cost,a,b))

#간선을 비용순으로 정렬
def quick_sort(array, start, end):
  # 만약에 원소가 1개이면 return 
  if start >= end:
    return

  pivot = start
  left = start + 1
  right = end

  while left <= right:
    while left <= end and array[left] <= array[pivot]:
      left += 1
    while right > start and array[right] >= array[pivot]:
      right -= 1
    if left > right:
      array[right], array[pivot] = array[pivot], array[right]
    else:
      array[left], array[right] = array[right], array[left]

  
  quick_sort(array, start, right-1)
  quick_sort(array, right+1, end)
quick_sort(edges, 0, len(edges)-1)

for edge in edges:
    cost, a, b = edge 
    #사이클이 발생하지 않는 경우에만 집합에 포함 
    if find_parent(parent,a) != find_parent(parent,b):
        union_parent(parent,a,b)
        result += cost 
print(result)
